// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: condition.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddConditionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddConditionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddConditionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddConditionRequestMultiError, or nil if none found.
func (m *AddConditionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddConditionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Wasm

	if len(errors) > 0 {
		return AddConditionRequestMultiError(errors)
	}

	return nil
}

// AddConditionRequestMultiError is an error wrapping multiple validation
// errors returned by AddConditionRequest.ValidateAll() if the designated
// constraints aren't met.
type AddConditionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddConditionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddConditionRequestMultiError) AllErrors() []error { return m }

// AddConditionRequestValidationError is the validation error returned by
// AddConditionRequest.Validate if the designated constraints aren't met.
type AddConditionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddConditionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddConditionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddConditionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddConditionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddConditionRequestValidationError) ErrorName() string {
	return "AddConditionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddConditionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddConditionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddConditionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddConditionRequestValidationError{}

// Validate checks the field values on GetConditionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConditionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConditionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConditionRequestMultiError, or nil if none found.
func (m *GetConditionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConditionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetConditionRequestMultiError(errors)
	}

	return nil
}

// GetConditionRequestMultiError is an error wrapping multiple validation
// errors returned by GetConditionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConditionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConditionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConditionRequestMultiError) AllErrors() []error { return m }

// GetConditionRequestValidationError is the validation error returned by
// GetConditionRequest.Validate if the designated constraints aren't met.
type GetConditionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConditionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConditionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConditionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConditionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConditionRequestValidationError) ErrorName() string {
	return "GetConditionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConditionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConditionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConditionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConditionRequestValidationError{}

// Validate checks the field values on GetConditionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConditionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConditionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConditionsRequestMultiError, or nil if none found.
func (m *GetConditionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConditionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetConditionsRequestMultiError(errors)
	}

	return nil
}

// GetConditionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetConditionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConditionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConditionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConditionsRequestMultiError) AllErrors() []error { return m }

// GetConditionsRequestValidationError is the validation error returned by
// GetConditionsRequest.Validate if the designated constraints aren't met.
type GetConditionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConditionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConditionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConditionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConditionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConditionsRequestValidationError) ErrorName() string {
	return "GetConditionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConditionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConditionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConditionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConditionsRequestValidationError{}

// Validate checks the field values on ConditionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConditionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConditionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConditionResponseMultiError, or nil if none found.
func (m *ConditionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConditionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Created

	// no validation rules for Updated

	if len(errors) > 0 {
		return ConditionResponseMultiError(errors)
	}

	return nil
}

// ConditionResponseMultiError is an error wrapping multiple validation errors
// returned by ConditionResponse.ValidateAll() if the designated constraints
// aren't met.
type ConditionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionResponseMultiError) AllErrors() []error { return m }

// ConditionResponseValidationError is the validation error returned by
// ConditionResponse.Validate if the designated constraints aren't met.
type ConditionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionResponseValidationError) ErrorName() string {
	return "ConditionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConditionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConditionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionResponseValidationError{}

// Validate checks the field values on ConditionsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConditionsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConditionsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConditionsListResponseMultiError, or nil if none found.
func (m *ConditionsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConditionsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConditionsListResponseValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConditionsListResponseValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConditionsListResponseValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ConditionsListResponseMultiError(errors)
	}

	return nil
}

// ConditionsListResponseMultiError is an error wrapping multiple validation
// errors returned by ConditionsListResponse.ValidateAll() if the designated
// constraints aren't met.
type ConditionsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionsListResponseMultiError) AllErrors() []error { return m }

// ConditionsListResponseValidationError is the validation error returned by
// ConditionsListResponse.Validate if the designated constraints aren't met.
type ConditionsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionsListResponseValidationError) ErrorName() string {
	return "ConditionsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConditionsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConditionsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionsListResponseValidationError{}
