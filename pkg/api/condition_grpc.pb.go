// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: condition.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConditionService_AddCondition_FullMethodName    = "/api.ConditionService/AddCondition"
	ConditionService_GetCondition_FullMethodName    = "/api.ConditionService/GetCondition"
	ConditionService_GetConditions_FullMethodName   = "/api.ConditionService/GetConditions"
	ConditionService_DeleteCondition_FullMethodName = "/api.ConditionService/DeleteCondition"
)

// ConditionServiceClient is the client API for ConditionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConditionServiceClient interface {
	AddCondition(ctx context.Context, in *AddConditionRequest, opts ...grpc.CallOption) (*ConditionResponse, error)
	GetCondition(ctx context.Context, in *GetConditionRequest, opts ...grpc.CallOption) (*ConditionResponse, error)
	GetConditions(ctx context.Context, in *GetConditionsRequest, opts ...grpc.CallOption) (*ConditionsListResponse, error)
	DeleteCondition(ctx context.Context, in *GetConditionRequest, opts ...grpc.CallOption) (*ConditionResponse, error)
}

type conditionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConditionServiceClient(cc grpc.ClientConnInterface) ConditionServiceClient {
	return &conditionServiceClient{cc}
}

func (c *conditionServiceClient) AddCondition(ctx context.Context, in *AddConditionRequest, opts ...grpc.CallOption) (*ConditionResponse, error) {
	out := new(ConditionResponse)
	err := c.cc.Invoke(ctx, ConditionService_AddCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) GetCondition(ctx context.Context, in *GetConditionRequest, opts ...grpc.CallOption) (*ConditionResponse, error) {
	out := new(ConditionResponse)
	err := c.cc.Invoke(ctx, ConditionService_GetCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) GetConditions(ctx context.Context, in *GetConditionsRequest, opts ...grpc.CallOption) (*ConditionsListResponse, error) {
	out := new(ConditionsListResponse)
	err := c.cc.Invoke(ctx, ConditionService_GetConditions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) DeleteCondition(ctx context.Context, in *GetConditionRequest, opts ...grpc.CallOption) (*ConditionResponse, error) {
	out := new(ConditionResponse)
	err := c.cc.Invoke(ctx, ConditionService_DeleteCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConditionServiceServer is the server API for ConditionService service.
// All implementations must embed UnimplementedConditionServiceServer
// for forward compatibility
type ConditionServiceServer interface {
	AddCondition(context.Context, *AddConditionRequest) (*ConditionResponse, error)
	GetCondition(context.Context, *GetConditionRequest) (*ConditionResponse, error)
	GetConditions(context.Context, *GetConditionsRequest) (*ConditionsListResponse, error)
	DeleteCondition(context.Context, *GetConditionRequest) (*ConditionResponse, error)
	mustEmbedUnimplementedConditionServiceServer()
}

// UnimplementedConditionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConditionServiceServer struct {
}

func (UnimplementedConditionServiceServer) AddCondition(context.Context, *AddConditionRequest) (*ConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCondition not implemented")
}
func (UnimplementedConditionServiceServer) GetCondition(context.Context, *GetConditionRequest) (*ConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCondition not implemented")
}
func (UnimplementedConditionServiceServer) GetConditions(context.Context, *GetConditionsRequest) (*ConditionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConditions not implemented")
}
func (UnimplementedConditionServiceServer) DeleteCondition(context.Context, *GetConditionRequest) (*ConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCondition not implemented")
}
func (UnimplementedConditionServiceServer) mustEmbedUnimplementedConditionServiceServer() {}

// UnsafeConditionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConditionServiceServer will
// result in compilation errors.
type UnsafeConditionServiceServer interface {
	mustEmbedUnimplementedConditionServiceServer()
}

func RegisterConditionServiceServer(s grpc.ServiceRegistrar, srv ConditionServiceServer) {
	s.RegisterService(&ConditionService_ServiceDesc, srv)
}

func _ConditionService_AddCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).AddCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_AddCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).AddCondition(ctx, req.(*AddConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_GetCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).GetCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_GetCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).GetCondition(ctx, req.(*GetConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_GetConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).GetConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_GetConditions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).GetConditions(ctx, req.(*GetConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_DeleteCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).DeleteCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_DeleteCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).DeleteCondition(ctx, req.(*GetConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConditionService_ServiceDesc is the grpc.ServiceDesc for ConditionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConditionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ConditionService",
	HandlerType: (*ConditionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCondition",
			Handler:    _ConditionService_AddCondition_Handler,
		},
		{
			MethodName: "GetCondition",
			Handler:    _ConditionService_GetCondition_Handler,
		},
		{
			MethodName: "GetConditions",
			Handler:    _ConditionService_GetConditions_Handler,
		},
		{
			MethodName: "DeleteCondition",
			Handler:    _ConditionService_DeleteCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "condition.proto",
}
