// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: offer.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetOfferRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOfferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOfferRequestMultiError, or nil if none found.
func (m *GetOfferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOfferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOfferRequestMultiError(errors)
	}

	return nil
}

// GetOfferRequestMultiError is an error wrapping multiple validation errors
// returned by GetOfferRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOfferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOfferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOfferRequestMultiError) AllErrors() []error { return m }

// GetOfferRequestValidationError is the validation error returned by
// GetOfferRequest.Validate if the designated constraints aren't met.
type GetOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfferRequestValidationError) ErrorName() string { return "GetOfferRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfferRequestValidationError{}

// Validate checks the field values on GetOffersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOffersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOffersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOffersRequestMultiError, or nil if none found.
func (m *GetOffersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOffersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetOffersRequestMultiError(errors)
	}

	return nil
}

// GetOffersRequestMultiError is an error wrapping multiple validation errors
// returned by GetOffersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOffersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOffersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOffersRequestMultiError) AllErrors() []error { return m }

// GetOffersRequestValidationError is the validation error returned by
// GetOffersRequest.Validate if the designated constraints aren't met.
type GetOffersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffersRequestValidationError) ErrorName() string { return "GetOffersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOffersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffersRequestValidationError{}

// Validate checks the field values on OfferResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OfferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfferResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OfferResponseMultiError, or
// nil if none found.
func (m *OfferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OfferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SiteId

	// no validation rules for Site

	// no validation rules for Created

	// no validation rules for Updated

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Area

	// no validation rules for Rooms

	// no validation rules for Floor

	// no validation rules for BuildingFloors

	// no validation rules for Year

	// no validation rules for Heating

	// no validation rules for Market

	// no validation rules for Window

	// no validation rules for Elevator

	// no validation rules for Balcony

	for idx, item := range m.GetHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OfferResponseValidationError{
						field:  fmt.Sprintf("History[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OfferResponseValidationError{
						field:  fmt.Sprintf("History[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OfferResponseValidationError{
					field:  fmt.Sprintf("History[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OfferResponseMultiError(errors)
	}

	return nil
}

// OfferResponseMultiError is an error wrapping multiple validation errors
// returned by OfferResponse.ValidateAll() if the designated constraints
// aren't met.
type OfferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferResponseMultiError) AllErrors() []error { return m }

// OfferResponseValidationError is the validation error returned by
// OfferResponse.Validate if the designated constraints aren't met.
type OfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferResponseValidationError) ErrorName() string { return "OfferResponseValidationError" }

// Error satisfies the builtin error interface
func (e OfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferResponseValidationError{}

// Validate checks the field values on OfferHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OfferHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfferHistory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OfferHistoryMultiError, or
// nil if none found.
func (m *OfferHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *OfferHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Updated

	// no validation rules for Price

	if len(errors) > 0 {
		return OfferHistoryMultiError(errors)
	}

	return nil
}

// OfferHistoryMultiError is an error wrapping multiple validation errors
// returned by OfferHistory.ValidateAll() if the designated constraints aren't met.
type OfferHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferHistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferHistoryMultiError) AllErrors() []error { return m }

// OfferHistoryValidationError is the validation error returned by
// OfferHistory.Validate if the designated constraints aren't met.
type OfferHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferHistoryValidationError) ErrorName() string { return "OfferHistoryValidationError" }

// Error satisfies the builtin error interface
func (e OfferHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferHistoryValidationError{}

// Validate checks the field values on OfferListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OfferListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfferListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OfferListResponseMultiError, or nil if none found.
func (m *OfferListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OfferListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOffers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OfferListResponseValidationError{
						field:  fmt.Sprintf("Offers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OfferListResponseValidationError{
						field:  fmt.Sprintf("Offers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OfferListResponseValidationError{
					field:  fmt.Sprintf("Offers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return OfferListResponseMultiError(errors)
	}

	return nil
}

// OfferListResponseMultiError is an error wrapping multiple validation errors
// returned by OfferListResponse.ValidateAll() if the designated constraints
// aren't met.
type OfferListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferListResponseMultiError) AllErrors() []error { return m }

// OfferListResponseValidationError is the validation error returned by
// OfferListResponse.Validate if the designated constraints aren't met.
type OfferListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferListResponseValidationError) ErrorName() string {
	return "OfferListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OfferListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferListResponseValidationError{}
