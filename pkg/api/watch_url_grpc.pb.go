// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: watch_url.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WatchUrlService_AddUrl_FullMethodName   = "/api.WatchUrlService/AddUrl"
	WatchUrlService_SetState_FullMethodName = "/api.WatchUrlService/SetState"
	WatchUrlService_GetUrls_FullMethodName  = "/api.WatchUrlService/GetUrls"
)

// WatchUrlServiceClient is the client API for WatchUrlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchUrlServiceClient interface {
	AddUrl(ctx context.Context, in *AddUrlRequest, opts ...grpc.CallOption) (*UrlResponse, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*UrlResponse, error)
	GetUrls(ctx context.Context, in *GetUrlsRequest, opts ...grpc.CallOption) (*UrlListResponse, error)
}

type watchUrlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchUrlServiceClient(cc grpc.ClientConnInterface) WatchUrlServiceClient {
	return &watchUrlServiceClient{cc}
}

func (c *watchUrlServiceClient) AddUrl(ctx context.Context, in *AddUrlRequest, opts ...grpc.CallOption) (*UrlResponse, error) {
	out := new(UrlResponse)
	err := c.cc.Invoke(ctx, WatchUrlService_AddUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchUrlServiceClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*UrlResponse, error) {
	out := new(UrlResponse)
	err := c.cc.Invoke(ctx, WatchUrlService_SetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchUrlServiceClient) GetUrls(ctx context.Context, in *GetUrlsRequest, opts ...grpc.CallOption) (*UrlListResponse, error) {
	out := new(UrlListResponse)
	err := c.cc.Invoke(ctx, WatchUrlService_GetUrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchUrlServiceServer is the server API for WatchUrlService service.
// All implementations must embed UnimplementedWatchUrlServiceServer
// for forward compatibility
type WatchUrlServiceServer interface {
	AddUrl(context.Context, *AddUrlRequest) (*UrlResponse, error)
	SetState(context.Context, *SetStateRequest) (*UrlResponse, error)
	GetUrls(context.Context, *GetUrlsRequest) (*UrlListResponse, error)
	mustEmbedUnimplementedWatchUrlServiceServer()
}

// UnimplementedWatchUrlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWatchUrlServiceServer struct {
}

func (UnimplementedWatchUrlServiceServer) AddUrl(context.Context, *AddUrlRequest) (*UrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUrl not implemented")
}
func (UnimplementedWatchUrlServiceServer) SetState(context.Context, *SetStateRequest) (*UrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedWatchUrlServiceServer) GetUrls(context.Context, *GetUrlsRequest) (*UrlListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrls not implemented")
}
func (UnimplementedWatchUrlServiceServer) mustEmbedUnimplementedWatchUrlServiceServer() {}

// UnsafeWatchUrlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchUrlServiceServer will
// result in compilation errors.
type UnsafeWatchUrlServiceServer interface {
	mustEmbedUnimplementedWatchUrlServiceServer()
}

func RegisterWatchUrlServiceServer(s grpc.ServiceRegistrar, srv WatchUrlServiceServer) {
	s.RegisterService(&WatchUrlService_ServiceDesc, srv)
}

func _WatchUrlService_AddUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchUrlServiceServer).AddUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchUrlService_AddUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchUrlServiceServer).AddUrl(ctx, req.(*AddUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchUrlService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchUrlServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchUrlService_SetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchUrlServiceServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchUrlService_GetUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchUrlServiceServer).GetUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchUrlService_GetUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchUrlServiceServer).GetUrls(ctx, req.(*GetUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WatchUrlService_ServiceDesc is the grpc.ServiceDesc for WatchUrlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchUrlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.WatchUrlService",
	HandlerType: (*WatchUrlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUrl",
			Handler:    _WatchUrlService_AddUrl_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _WatchUrlService_SetState_Handler,
		},
		{
			MethodName: "GetUrls",
			Handler:    _WatchUrlService_GetUrls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "watch_url.proto",
}
